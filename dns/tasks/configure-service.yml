# ------------------------------------------------------------------------------
# dns/tasks/configure-service.yml
# ------------------------------------------------------------------------------

# Tasks to configure the DNS service, which is based on Dnsmasq. There are three
# aspects to this:
# 1. The combination of upstream and self DNS "Resolvers".
# 2. The "Mask" that Dnsmasq supplements the upstream resolution with.
# 3. The "DHCP" service.

---

- block:

    # ------------
    # 1. Resolvers
    # ------------

    - name: Template out upstream-resolv.conf
      # See the template file itself for more information.
      ansible.builtin.template:
        src: upstream-resolv.conf.j2
        dest: /etc/upstream-resolv.conf

    - name: Set resolv-file to /etc/upstream-resolv.conf in /etc/dnsmasq.conf
      # Use the upstream resolve file that was templated out in the previous
      # task.
      ansible.builtin.lineinfile:
        path: /etc/dnsmasq.conf
        regexp: '^#?resolv-file='
        line: resolv-file=/etc/upstream-resolv.conf
      notify: Dnsmasq configuration changed

    - name: Set /etc/resolv.conf as required for a DNS server
      ansible.builtin.copy:
        content: |
          # Deployed using Ansible dns role
          domain {{ home_domain }}
          search {{ home_domain }}
          nameserver 127.0.0.1
        dest: /etc/resolv.conf
        unsafe_writes: "{{ unsafe_writes }}"

    # -------
    # 2. Mask
    # -------

    - name: Enable expand-hosts in /etc/dnsmasq.conf
      # This automatically adds a domain to simple names in /etc/addn-hosts.
      ansible.builtin.lineinfile:
        path: /etc/dnsmasq.conf
        regexp: '^#?expand-hosts'
        line: expand-hosts
      notify: Dnsmasq configuration changed

    - name: Set domain to required value in /etc/dnsmasq.conf
      # For the expand-hosts setting to take effect, we need to provide the
      # domain that will be added to the simple names in /etc/addn-hosts; see:
      # https://github.com/varilink/libraries-ansible#home_domain
      ansible.builtin.lineinfile:
        path: /etc/dnsmasq.conf
        regexp: "^#?domain=(?:thekelleys\\.org\\.uk|{{ home_domain }})"
        line: domain={{ home_domain }}
      notify: Dnsmasq configuration changed

    - name: Enable read of additional hosts file in /etc/dnsmasq.conf
      # I like to isolate the "mask" entries from the /etc/hosts file so we use
      # a separate file for additional hosts.
      ansible.builtin.lineinfile:
        path: /etc/dnsmasq.conf
        regexp: '^#?addn-hosts='
        line: addn-hosts=/etc/addn-hosts
      notify: Dnsmasq configuration changed

    - name: Copy skeleton addn-hosts file
      # In order to give the /etc/addn-hosts file a logical structure:
      # 1. Setup an Ansible managed block for the host and base service (e.g.
      #    bacula-dir, caldav, etc.) entries.
      # 2. Add a "# Project entries" line for project playbooks to add their
      #    entries after.
      ansible.builtin.copy:
        content: |
          # Hosts

          # Services

          # Projects
        dest: /etc/addn-hosts
        force: no
      notify: Dnsmasq configuration changed

    - ansible.builtin.include_tasks: add-host-lookup.yml
      loop: "{{ hosts_in_scope }}"
      loop_control:
        loop_var: lookup_host
      vars:
        hosts_in_scope: "\
          {{ lookup('inventory_hostnames', dns_hosts_group).split(',') }}"
      when: ansible_limit is not defined

    - ansible.builtin.include_tasks: add-host-lookup.yml
      loop: "{{ hosts_in_scope | intersect(hosts_limited_to) }}"
      loop_control:
        loop_var: lookup_host
      vars:
        hosts_in_scope: "\
          {{ lookup('inventory_hostnames', dns_hosts_group).split(',') }}"
        hosts_limited_to: "{{ ansible_limit.split(',') }}"
      when: ansible_limit is defined

    # -------
    # 3. DHCP
    # -------

    - block:

        # A DHCP range has been defined for this inventory so enable Dnsmasq's
        # builtin DHCP service. When testing in a container environment we don't
        # specify a DHCP range and so defer to Docker's builtin DHCP service.

        - name: Enable the integrated DHCP server
          ansible.builtin.lineinfile:
            path: /etc/dnsmasq.conf
            regexp: '^#?dhcp-range='
            line: dhcp-range={{ dhcp_range }},12h
          notify: Dnsmasq configuration changed

        - name: Put the DHCP server in authoritative mode
          ansible.builtin.lineinfile:
            path: /etc/dnsmasq.conf
            regexp: '^#?dhcp-authoritative$'
            line: dhcp-authoritative
          notify: Dnsmasq configuration changed

        - name: Override the default route supplied by dnsmasq
          ansible.builtin.lineinfile:
            path: /etc/dnsmasq.conf
            regexp: '^#?dhcp-option=option:router,'
            line: dhcp-option=option:router,{{ office_router }}
          notify: Dnsmasq configuration changed

        - name: Set DNS servers supplied by DHCP
          ansible.builtin.lineinfile:
            path: /etc/dnsmasq.conf
            line: "dhcp-option=option:dns-server,\
              {{ dns_client_nameservers | join(',') }}"
          notify: Dnsmasq configuration changed

      when: dhcp_range is defined

  become: yes
